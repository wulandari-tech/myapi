<%- include('../partials/header', { title: title }) %>

<style>
.api-try-out-section .card-header { display: flex; justify-content: space-between; align-items: center; }
.api-category-btn-group button { margin-right: 0.5rem; margin-bottom: 0.5rem; }
.api-form-container .form-group { margin-bottom: 1rem; }
.api-form-container .form-group label { display: block; font-weight: 500; margin-bottom: 0.25rem; }
.api-form-container .form-group input[type="text"],
.api-form-container .form-group select,
.api-form-container .form-group textarea {
    width: 100%;
    padding: 0.625rem 1rem;
    border-width: 1px;
    border-radius: 0.375rem;
}
html[data-theme='dark'] .api-form-container .form-group input,
html[data-theme='dark'] .api-form-container .form-group select,
html[data-theme='dark'] .api-form-container .form-group textarea { background-color: var(--bg-dark-secondary); border-color: var(--border-dark); color: var(--text-light); }
html[data-theme='light'] .api-form-container .form-group input,
html[data-theme='light'] .api-form-container .form-group select,
html[data-theme='light'] .api-form-container .form-group textarea { background-color: var(--bg-light-secondary); border-color: var(--border-light); color: var(--text-dark); }

#apiResponseTryOut {
    background-color: #2d2d2d;
    color: #f8f8f2;
    padding: 1em;
    border-radius: 0.3em;
    overflow-x: auto;
    font-size: 0.85em;
    min-height: 100px;
    max-height: 400px;
    white-space: pre-wrap;
    word-break: break-all;
}
html[data-theme='light'] #apiResponseTryOut { background-color: #f5f5f5; color: #333; }
.response-actions button { margin-top: 0.5rem; }
</style>

<div class="container mx-auto px-4 py-8">
    <h1 class="text-3xl font-bold text-text-light mb-2">
        <i class="fas fa-tachometer-alt mr-2 text-accent-color"></i> Dashboard
    </h1>
    <p class="text-text-light opacity-80 mb-8">Selamat datang, <%= user.profile.displayName || user.username %>!</p>

    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
        <div class="card">
            <div class="card-header">
                <i class="fas fa-key mr-2 text-accent-color"></i> API Key Anda
            </div>
            <div class="card-body">
                <div class="flex items-center justify-between mb-3">
                    <input type="text" id="userApiKey" value="<%= user.apiKey %>" class="form-input-readonly w-full mr-2 select-all" readonly>
                    <button class="btn btn-icon btn-secondary copy-btn" data-clipboard-target="#userApiKey" title="Copy API Key" aria-label="Copy API Key">
                        <i class="fas fa-copy"></i>
                    </button>
                </div>
                <form action="/dashboard/generate-key" method="POST" class="inline-block">
                    <button type="submit" class="btn btn-outline-warning text-sm" onclick="return confirm('Yakin ingin membuat API Key baru? Key lama akan tidak valid.')">
                        <i class="fas fa-redo-alt mr-2"></i> Generate Acak Baru
                    </button>
                </form>
                <% if (user.plan !== 'free') { %>
                <button id="showCustomKeyFormBtn" class="btn btn-outline-info text-sm ml-2">
                    <i class="fas fa-edit mr-2"></i> Kustomisasi Key
                </button>
                <form action="/dashboard/customize-key" method="POST" id="customKeyForm" class="mt-3 hidden">
                    <label for="customApiKeyInput" class="block text-sm font-medium mb-1">API Key Kustom (Prefix "wzfc_" akan ditambahkan):</label>
                    <div class="flex">
                        <span class="inline-flex items-center px-3 rounded-l-md border border-r-0 border-border-dark bg-bg-dark text-sm">wzfc_</span>
                        <input type="text" name="customPart" id="customApiKeyInput" class="form-input rounded-l-none" placeholder="CUSTOMANDA" pattern="[a-zA-Z0-9]{10,30}" title="10-30 karakter alfanumerik" required>
                    </div>
                     <p class="text-xs opacity-70 mt-1">Hanya huruf dan angka, 10-30 karakter.</p>
                    <button type="submit" class="btn btn-primary text-sm mt-2">
                        <i class="fas fa-save mr-2"></i> Simpan Key Kustom
                    </button>
                </form>
                <% } %>
            </div>
        </div>
        <div class="card">
            <div class="card-header">
                <i class="fas fa-chart-pie mr-2 text-info-color"></i> Status Akun & Kuota
            </div>
            <div class="card-body">
                <p class="text-text-light">Paket Saat Ini: <span class="font-semibold capitalize text-accent-color"><%= user.plan %></span>
                <% if (user.subscriptionEndsAt && user.plan !== 'free' && (!user.isLifetime || user.plan !== 'lifetime')) { %>
                    <span class="text-xs opacity-70">(Aktif hingga: <%= new Date(user.subscriptionEndsAt).toLocaleDateString('id-ID', { year: 'numeric', month: 'long', day: 'numeric' }) %>)</span>
                <% } else if (user.isLifetime || user.plan === 'lifetime') { %>
                     <span class="text-xs opacity-70">(Lifetime)</span>
                <% } %>
                </p>
                <%
                    const quotaRequests = (user.quota && user.quota.requests) ? user.quota.requests : (user.plan === 'free' ? 1000 : 50000);
                    const today = new Date().setHours(0, 0, 0, 0);
                    const usageTodayEntry = user.apiUsage.find(u => new Date(u.date).setHours(0,0,0,0) === today);
                    const currentUsage = usageTodayEntry ? usageTodayEntry.count : 0;
                    const remainingQuota = quotaRequests - currentUsage;
                    const percentageUsed = quotaRequests > 0 ? Math.min(100, (currentUsage / quotaRequests) * 100) : 0;
                    const quotaPeriod = (user.quota && user.quota.period) ? user.quota.period : 'harian';
                %>
                <p class="text-text-light">Kuota <%= quotaPeriod %>: <span class="font-semibold"><%= currentUsage %> / <%= quotaRequests %></span></p>
                <div class="w-full bg-gray-700 rounded-full h-2.5 mt-2">
                    <div class="bg-accent-color h-2.5 rounded-full" style="width: <%= percentageUsed.toFixed(2) %>%"></div>
                </div>
                <p class="text-sm text-gray-400 mt-1">Sisa Kuota: <%= remainingQuota %></p>
                <% if (user.plan === 'free') { %>
                    <a href="/pricing" class="btn btn-primary mt-4 w-full text-sm"> <i class="fas fa-arrow-up mr-2"></i> Upgrade Paket </a>
                <% } else { %>
                     <p class="text-sm text-success-color mt-3"><i class="fas fa-star mr-1"></i> Anda menggunakan paket premium!</p>
                <% } %>
            </div>
        </div>
        <div class="card">
            <div class="card-header">
                <i class="fas fa-user-cog mr-2 text-warning-color"></i> Pengaturan Akun
            </div>
            <div class="card-body">
                <form action="/dashboard/edit-profile" method="POST">
                    <div class="mb-4">
                        <label for="displayNameInput" class="block text-sm font-medium text-text-light mb-1">Nama Tampilan</label>
                        <input type="text" name="displayName" id="displayNameInput" value="<%= user.profile.displayName || user.username %>" class="form-input w-full">
                    </div>
                    <button type="submit" class="btn btn-primary w-full"> <i class="fas fa-save mr-2"></i> Simpan Profil </button>
                </form>
            </div>
        </div>
    </div>

    <div class="card api-try-out-section">
        <div class="card-header">
            <h2 class="text-xl font-semibold"><i class="fas fa-vial mr-2 text-accent-color"></i> Coba API Langsung</h2>
            <select id="apiCategorySelect" class="form-input-sm" style="max-width: 200px; padding: 0.5rem 0.75rem; font-size: 0.875rem;">
                <option value="">Pilih Kategori API</option>
            </select>
        </div>
        <div class="card-body">
            <div id="apiEndpointSelectContainer" class="mb-4 hidden">
                <label for="apiEndpointSelect" class="block text-sm font-medium mb-1">Pilih Endpoint:</label>
                <select id="apiEndpointSelect" class="form-input"></select>
            </div>

            <div id="apiFormContainer" class="api-form-container mb-4 hidden">
            </div>

            <button id="tryApiBtn" class="btn btn-primary hidden"><i class="fas fa-paper-plane mr-2"></i> Jalankan API</button>

            <div class="mt-6">
                <h4 class="text-lg font-semibold mb-2">Response:</h4>
                <div class="relative">
                    <pre id="apiResponseTryOut"><code class="language-json">Hasil akan tampil di sini...</code></pre>
                    <button id="copyApiResponseBtn" class="btn btn-icon btn-sm absolute top-2 right-2 hidden" title="Copy Response">
                        <i class="fas fa-copy"></i>
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', () => {
    document.getElementById('showCustomKeyFormBtn')?.addEventListener('click', function() {
        document.getElementById('customKeyForm')?.classList.toggle('hidden');
    });

    document.querySelectorAll('.copy-btn').forEach(button => {
        button.addEventListener('click', () => {
            const targetId = button.dataset.clipboardTarget;
            const targetElement = document.querySelector(targetId);
            if (targetElement) {
                const valueToCopy = targetElement.value || targetElement.innerText || targetElement.textContent;
                navigator.clipboard.writeText(valueToCopy)
                    .then(() => {
                        const originalIcon = button.innerHTML;
                        button.innerHTML = '<i class="fas fa-check text-success-color"></i>';
                        setTimeout(() => { button.innerHTML = originalIcon; }, 1500);
                    }).catch(err => console.error('Failed to copy: ', err));
            }
        });
    });

    const userApiKeyElement = document.getElementById('userApiKey');
    const userApiKey = userApiKeyElement ? userApiKeyElement.value : '';

    const availableApis = {
        'AI Tools': [
            { name: 'HydroMind AI', endpoint: '/api/v1/ai/hydromind', method: 'GET', params: [ { name: 'content', type: 'textarea', placeholder: 'Ketik pesan Anda di sini...', required: true, label: 'Konten/Pesan' }, { name: 'model', type: 'text', placeholder: 'cth: gpt-3.5-turbo', required: true, label: 'Model AI' } ] },
            { name: 'LuminAI', endpoint: '/api/v1/ai/luminai', method: 'GET', params: [ { name: 'text', type: 'textarea', placeholder: 'Ketik pesan Anda di sini...', required: true, label: 'Teks/Konten' } ] },
            { name: 'Deepseek AI', endpoint: '/api/v1/ai/deepseek', method: 'GET', params: [ { name: 'prompt', type: 'textarea', placeholder: 'Pertanyaan Anda untuk Deepseek...', required: true, label: 'Prompt' } ] },
            { name: 'Gemini (Gambar)', endpoint: '/api/v1/ai/gemini-image', method: 'GET', params: [ { name: 'prompt', type: 'text', placeholder: 'Deskripsi untuk gambar...', required: true, label: 'Prompt Teks' }, { name: 'url', type: 'text', placeholder: 'https://example.com/image.jpg', required: true, label: 'URL Gambar' } ] },
            { name: 'Gemini (Teks)', endpoint: '/api/v1/ai/gemini', method: 'GET', params: [ { name: 'prompt', type: 'textarea', placeholder: 'Pertanyaan Anda untuk Gemini...', required: true, label: 'Prompt' } ] },
            { name: 'GPT-4o', endpoint: '/api/v1/ai/gpt4o', method: 'GET', params: [ { name: 'prompt', type: 'textarea', placeholder: 'Interaksi dengan GPT-4o...', required: true, label: 'Prompt' } ] },
            { name: 'GPT-4.1', endpoint: '/api/v1/ai/gpt4', method: 'GET', params: [ { name: 'prompt', type: 'textarea', placeholder: 'Interaksi dengan GPT-4.1...', required: true, label: 'Prompt' } ] },
            { name: 'Meta Llama', endpoint: '/api/v1/ai/llama', method: 'GET', params: [ { name: 'prompt', type: 'textarea', placeholder: 'Interaksi dengan Llama...', required: true, label: 'Prompt' } ] },
            { name: 'Text to Image (Org)', endpoint: '/api/v1/ai/txt2img', method: 'GET', params: [ { name: 'prompt', type: 'text', placeholder: 'Deskripsi gambar yang diinginkan...', required: true, label: 'Prompt Gambar' } ] },
            { name: 'Text to Video (Aritek)', endpoint: '/api/v1/ai/txt2video', method: 'GET', params: [ { name: 'prompt', type: 'text', placeholder: 'Deskripsi video...', required: true, label: 'Prompt Video' } ] },
            { name: 'Whisper Audio Transcribe', endpoint: '/api/v1/ai/whisper', method: 'GET', params: [ { name: 'url', type: 'text', placeholder: 'URL file audio (misal .mp3)...', required: true, label: 'URL Audio' } ] }
        ],
        'Downloaders': [
            { name: 'YouTube (Savetube)', endpoint: '/api/v1/download/youtube', method: 'GET', params: [ { name: 'url', type: 'text', placeholder: 'https://youtube.com/watch?v=...', required: true, label: 'URL YouTube' }, { name: 'format', type: 'select', options: ['mp3', 'm4a', '360p', '480p', '720p', '1080p', 'best'], required: false, label: 'Format (Opsional)' } ] },
            { name: 'YouTube MP4 (Mobi)', endpoint: '/api/v1/download/ytmp4', method: 'GET', params: [ { name: 'url', type: 'text', placeholder: 'https://youtube.com/watch?v=...', required: true, label: 'URL YouTube' } ] },
            { name: 'Instagram (SSS)', endpoint: '/api/v1/download/instagram', method: 'GET', params: [ { name: 'url', type: 'text', placeholder: 'https://instagram.com/p/...', required: true, label: 'URL Instagram' } ] },
            { name: 'TikTok (TikWM)', endpoint: '/api/v1/download/tiktok', method: 'GET', params: [ { name: 'url', type: 'text', placeholder: 'https://tiktok.com/@user/video/...', required: true, label: 'URL TikTok' } ] },
            { name: 'Twitter/X (TwMate)', endpoint: '/api/v1/download/twitter', method: 'GET', params: [ { name: 'url', type: 'text', placeholder: 'https://x.com/user/status/...', required: true, label: 'URL Twitter/X' } ] },
            { name: 'MediaFire', endpoint: '/api/v1/download/mediafire', method: 'GET', params: [ { name: 'url', type: 'text', placeholder: 'https://mediafire.com/file/...', required: true, label: 'URL MediaFire' } ] },
            { name: 'Spotify (SpotifyDown)', endpoint: '/api/v1/download/spotify', method: 'GET', params: [ { name: 'url', type: 'text', placeholder: 'https://open.spotify.com/track/...', required: true, label: 'URL Spotify' } ] },
            { name: 'Douyin (Lovetik/Search)', endpoint: '/api/v1/download/douyin', method: 'GET', params: [ { name: 'url', type: 'text', placeholder: 'URL Douyin atau kata kunci pencarian...', required: true, label: 'URL/Query Douyin' } ] },
            { name: 'Bstation (Search/DL)', endpoint: '/api/v1/download/bstation', method: 'GET', params: [ { name: 'query', type: 'text', placeholder: 'URL Video Bstation atau Judul...', required: true, label: 'URL/Judul Bstation' } ] }
        ],
        'Search Engines': [
            { name: 'Google Search (Mojeek)', endpoint: '/api/v1/search/google', method: 'GET', params: [ { name: 'q', type: 'text', placeholder: 'Kata kunci pencarian...', required: true, label: 'Query Google' } ] },
            { name: 'Pinterest Search', endpoint: '/api/v1/search/pinterest', method: 'GET', params: [ { name: 'query', type: 'text', placeholder: 'Cari pin...', required: true, label: 'Query Pinterest' } ] },
            { name: 'Cari Lirik (Genius)', endpoint: '/api/v1/search/lyrics', method: 'GET', params: [ { name: 'q', type: 'text', placeholder: 'Judul lagu atau artis...', required: true, label: 'Judul Lagu/Artis' } ] }
        ],
        'Stalkers': [
            { name: 'Instagram Stalk', endpoint: '/api/v1/stalk/instagram', method: 'GET', params: [ { name: 'q', type: 'text', placeholder: 'Username Instagram (tanpa @)...', required: true, label: 'Username IG' } ] },
            { name: 'Genshin Impact Stalk', endpoint: '/api/v1/stalk/genshin', method: 'GET', params: [ { name: 'q', type: 'text', placeholder: 'UID Genshin Impact (9 digit)...', required: true, label: 'UID Genshin' } ] }
        ],
        'Image Tools': [
            { name: 'Foto ke Anime (PixNova)', endpoint: '/api/v1/tools/toanime', method: 'GET', params: [ { name: 'url', type: 'text', placeholder: 'URL Gambar...', required: true, label: 'URL Gambar' } ] },
            { name: 'Foto ke Zombie (PixNova)', endpoint: '/api/v1/tools/tozombie', method: 'GET', params: [ { name: 'url', type: 'text', placeholder: 'URL Gambar...', required: true, label: 'URL Gambar' } ] },
            { name: 'Image Enhancement (PxPic)', endpoint: '/api/v1/tools/image-enhance', method: 'GET', params: [ { name: 'url', type: 'text', placeholder: 'URL Gambar...', required: true, label: 'URL Gambar' }, { name: 'tool', type: 'select', options: ['removebg', 'enhance', 'upscale', 'restore', 'colorize'], required: true, label: 'Tool PxPic' } ] }
        ],
        'Other': [
            { name: 'Grow A Garden Stock', endpoint: '/api/v1/other/growagarden', method: 'GET', params: [] },
            { name: 'Contoh API', endpoint: '/api/v1/example', method: 'GET', params: [] }
        ]
    };

    const apiCategorySelect = document.getElementById('apiCategorySelect');
    const apiEndpointSelectContainer = document.getElementById('apiEndpointSelectContainer');
    const apiEndpointSelect = document.getElementById('apiEndpointSelect');
    const apiFormContainer = document.getElementById('apiFormContainer');
    const tryApiBtn = document.getElementById('tryApiBtn');
    const apiResponseTryOut = document.getElementById('apiResponseTryOut').querySelector('code');
    const copyApiResponseBtn = document.getElementById('copyApiResponseBtn');

    Object.keys(availableApis).forEach(category => {
        const option = document.createElement('option');
        option.value = category;
        option.textContent = category;
        apiCategorySelect.appendChild(option);
    });

    apiCategorySelect.addEventListener('change', function() {
        const selectedCategory = this.value;
        apiEndpointSelect.innerHTML = '<option value="">Pilih Endpoint...</option>';
        apiFormContainer.innerHTML = '';
        tryApiBtn.classList.add('hidden');
        apiResponseTryOut.textContent = 'Hasil akan tampil di sini...';
        copyApiResponseBtn.classList.add('hidden');

        if (selectedCategory && availableApis[selectedCategory]) {
            apiEndpointSelectContainer.classList.remove('hidden');
            availableApis[selectedCategory].forEach((api, index) => {
                const option = document.createElement('option');
                option.value = index.toString(); // Gunakan index sebagai value
                option.textContent = api.name;
                apiEndpointSelect.appendChild(option);
            });
        } else {
            apiEndpointSelectContainer.classList.add('hidden');
        }
    });

    apiEndpointSelect.addEventListener('change', function() {
        const selectedCategory = apiCategorySelect.value;
        const selectedApiIndex = parseInt(this.value);
        apiFormContainer.innerHTML = '';
        apiResponseTryOut.textContent = 'Hasil akan tampil di sini...';
        copyApiResponseBtn.classList.add('hidden');

        if (selectedCategory && availableApis[selectedCategory] && !isNaN(selectedApiIndex) && selectedApiIndex >= 0) {
            const api = availableApis[selectedCategory][selectedApiIndex];
            if (api.params.length === 0) {
                 apiFormContainer.classList.add('hidden');
            } else {
                api.params.forEach(param => {
                    const formGroup = document.createElement('div');
                    formGroup.className = 'form-group';
                    const label = document.createElement('label');
                    label.htmlFor = `param-tryout-${param.name}`;
                    label.textContent = `${param.label}${param.required ? '*' : ''}:`;
                    formGroup.appendChild(label);

                    if (param.type === 'select') {
                        const select = document.createElement('select');
                        select.id = `param-tryout-${param.name}`;
                        select.name = param.name;
                        if (param.required) select.required = true;
                        (param.options || []).forEach(optValue => {
                            const option = document.createElement('option');
                            option.value = optValue;
                            option.textContent = optValue;
                            select.appendChild(option);
                        });
                        formGroup.appendChild(select);
                    } else if (param.type === 'textarea') {
                        const textarea = document.createElement('textarea');
                        textarea.id = `param-tryout-${param.name}`;
                        textarea.name = param.name;
                        textarea.placeholder = param.placeholder || '';
                        textarea.rows = 3;
                        if (param.required) textarea.required = true;
                        formGroup.appendChild(textarea);
                    } else {
                        const input = document.createElement('input');
                        input.type = param.type || 'text';
                        input.id = `param-tryout-${param.name}`;
                        input.name = param.name;
                        input.placeholder = param.placeholder || '';
                        if (param.required) input.required = true;
                        formGroup.appendChild(input);
                    }
                    apiFormContainer.appendChild(formGroup);
                });
                apiFormContainer.classList.remove('hidden');
            }
            tryApiBtn.classList.remove('hidden');
        } else {
            apiFormContainer.classList.add('hidden');
            tryApiBtn.classList.add('hidden');
        }
    });

    tryApiBtn.addEventListener('click', async () => {
        if (!userApiKey) {
            apiResponseTryOut.textContent = 'API Key pengguna tidak ditemukan. Harap refresh halaman.';
            return;
        }

        const selectedCategory = apiCategorySelect.value;
        const selectedApiIndex = parseInt(apiEndpointSelect.value);
        if (!selectedCategory || isNaN(selectedApiIndex) || selectedApiIndex < 0) {
            apiResponseTryOut.textContent = 'Pilih Kategori dan API endpoint terlebih dahulu.';
            return;
        }

        const api = availableApis[selectedCategory][selectedApiIndex];
        let fullUrl = api.endpoint;
        const params = new URLSearchParams();
        params.append('apikey', userApiKey);

        let formIsValid = true;
        api.params.forEach(param => {
            const inputElement = document.getElementById(`param-tryout-${param.name}`);
            if (inputElement) {
                if (param.required && !inputElement.value.trim()) {
                    formIsValid = false;
                    inputElement.style.borderColor = 'red'; // Highlight field yang error
                } else {
                     inputElement.style.borderColor = ''; // Reset border
                }
                if (inputElement.value.trim()) {
                    params.append(param.name, inputElement.value.trim());
                }
            } else if (param.required) {
                formIsValid = false; // Jika elemen tidak ditemukan tapi required
            }
        });

        if (!formIsValid) {
            apiResponseTryOut.textContent = 'Harap isi semua parameter yang wajib ditandai (*).';
            return;
        }
        
        fullUrl += '?' + params.toString();

        apiResponseTryOut.textContent = 'Memuat...';
        copyApiResponseBtn.classList.add('hidden');
        tryApiBtn.disabled = true;
        tryApiBtn.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i> Memproses...';


        try {
            const response = await fetch(fullUrl, { method: api.method });
            const data = await response.json();
            apiResponseTryOut.textContent = JSON.stringify(data, null, 2);
            if (window.Prism) { Prism.highlightElement(apiResponseTryOut); }
            copyApiResponseBtn.classList.remove('hidden');
        } catch (error) {
            apiResponseTryOut.textContent = `Error: ${error.message}\n\nPastikan URL dan parameter benar. Cek juga console browser.`;
            if (window.Prism) { Prism.highlightElement(apiResponseTryOut); }
        } finally {
            tryApiBtn.disabled = false;
            tryApiBtn.innerHTML = '<i class="fas fa-paper-plane mr-2"></i> Jalankan API';
        }
    });

    copyApiResponseBtn.addEventListener('click', () => {
        navigator.clipboard.writeText(apiResponseTryOut.textContent)
            .then(() => {
                const originalIcon = copyApiResponseBtn.innerHTML;
                copyApiResponseBtn.innerHTML = '<i class="fas fa-check"></i>';
                setTimeout(() => { copyApiResponseBtn.innerHTML = originalIcon; }, 1500);
            });
    });
});
</script>

<%- include('../partials/footer') %>